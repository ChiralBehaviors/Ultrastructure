/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 08 19:49:08 GMT 2016
 */

package com.chiralbehaviors.CoRE.workspace;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayOutputStream;
import java.net.URL;
import java.util.List;
import java.util.UUID;
import java.util.Vector;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import javax.sql.DataSource;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.UpdatableRecord;
import org.jooq.conf.Settings;
import org.jooq.impl.DataSourceConnectionProvider;
import org.jooq.impl.DefaultConfiguration;
import org.jooq.impl.DefaultDSLContext;
import org.jooq.impl.NoConnectionProvider;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGPoolingDataSource;
import org.postgresql.jdbc3.Jdbc3SimpleDataSource;

import com.chiralbehaviors.CoRE.domain.Product;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class WorkspaceSnapshot_ESTest
        extends WorkspaceSnapshot_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        // Undeclared exception!
        try {
            workspaceSnapshot0.deltaFrom((DSLContext) null,
                                         (WorkspaceSnapshot) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test01() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        workspaceSnapshot0.records = null;
        List<UpdatableRecord<? extends UpdatableRecord<?>>> list0 = workspaceSnapshot0.getRecords();
        assertNull(list0);
    }

    @Test(timeout = 4000)
    public void test02() throws Throwable {
        SQLDialect sQLDialect0 = SQLDialect.POSTGRES_9_4;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(sQLDialect0);
        Product product0 = new Product();
        // Undeclared exception!
        try {
            WorkspaceSnapshot.selectWorkspaceClosure(defaultDSLContext0,
                                                     product0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Cannot execute query. No Connection configured
            //
            assertThrownBy("org.jooq.impl.AbstractQuery", e);
        }
    }

    @Test(timeout = 4000)
    public void test03() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                PGPoolingDataSource pGPoolingDataSource0 = new PGPoolingDataSource();
                @SuppressWarnings("deprecation")
                SQLDialect sQLDialect0 = SQLDialect.SQL99;
                Settings settings0 = new Settings();
                DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(pGPoolingDataSource0,
                                                                             sQLDialect0,
                                                                             settings0);
                Product product0 = new Product();
                // Undeclared exception!
                try {
                    WorkspaceSnapshot.selectWorkspaceClosure(defaultDSLContext0,
                                                             product0);
                    fail("Expecting exception: RuntimeException");

                } catch (RuntimeException e) {
                    //
                    // Error getting connection from data source org.postgresql.ds.PGPoolingDataSource@1
                    //
                    assertThrownBy("org.jooq.impl.DataSourceConnectionProvider",
                                   e);
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }

    @Test(timeout = 4000)
    public void test04() throws Throwable {
        Product product0 = new Product();
        // Undeclared exception!
        try {
            WorkspaceSnapshot.selectWorkspaceClosure((DSLContext) null,
                                                     product0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test05() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        Product product0 = new Product();
        workspaceSnapshot0.definingProduct = product0;
        DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration();
        NoConnectionProvider noConnectionProvider0 = (NoConnectionProvider) defaultConfiguration0.connectionProvider();
        SQLDialect sQLDialect0 = SQLDialect.SQLITE;
        Settings settings0 = new Settings();
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(noConnectionProvider0,
                                                                     sQLDialect0,
                                                                     settings0);
        // Undeclared exception!
        try {
            workspaceSnapshot0.loadDefiningProduct(defaultDSLContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Cannot execute query. No Connection configured
            //
            assertThrownBy("org.jooq.impl.AbstractQuery", e);
        }
    }

    @Test(timeout = 4000)
    public void test06() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
                Product product0 = new Product();
                workspaceSnapshot0.definingProduct = product0;
                Jdbc3SimpleDataSource jdbc3SimpleDataSource0 = new Jdbc3SimpleDataSource();
                SQLDialect sQLDialect0 = SQLDialect.POSTGRES;
                DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(jdbc3SimpleDataSource0,
                                                                             sQLDialect0);
                // Undeclared exception!
                try {
                    workspaceSnapshot0.loadDefiningProduct(defaultDSLContext0);
                    fail("Expecting exception: RuntimeException");

                } catch (RuntimeException e) {
                    //
                    // Error getting connection from data source org.postgresql.jdbc3.Jdbc3SimpleDataSource@6
                    //
                    assertThrownBy("org.jooq.impl.DataSourceConnectionProvider",
                                   e);
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }

    @Test(timeout = 4000)
    public void test07() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        // Undeclared exception!
        try {
            workspaceSnapshot0.loadDefiningProduct((DSLContext) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test08() throws Throwable {
        Vector<URL> vector0 = new Vector<URL>();
        // Undeclared exception!
        try {
            WorkspaceSnapshot.load((DSLContext) null, vector0);
            fail("Expecting exception: VerifyError");

        } catch (VerifyError e) {
            //
            // Bad type on operand stack
            // Exception Details:
            //   Location:
            //     com/fasterxml/jackson/databind/ObjectMapper.<clinit>()V @62: invokespecial
            //   Reason:
            //     Type 'com/fasterxml/jackson/databind/util/StdDateFormat' (current frame, stack[8]) is not assignable to 'java/text/DateFormat'
            //   Current Frame:
            //     bci: @62
            //     flags: { }
            //     locals: { }
            //     stack: { uninitialized 35, uninitialized 35, null, 'com/fasterxml/jackson/databind/AnnotationIntrospector', 'com/fasterxml/jackson/databind/introspect/VisibilityChecker', null, 'com/fasterxml/jackson/databind/type/TypeFactory', null, 'com/fasterxml/jackson/databind/util/StdDateFormat', null, 'java/util/Locale', null, 'com/fasterxml/jackson/core/Base64Variant' }
            //   Bytecode:
            //     0x0000000: 1304 16b8 06ef b304 14bb 06f1 59b7 06f2
            //     0x0000010: b306 e5b8 06f5 b306 e7bb 06f7 59b7 06f8
            //     0x0000020: b306 e9bb 0102 5901 b206 e5b2 06e7 01b8
            //     0x0000030: 00f7 01b2 06fd 01b8 0703 01b8 0709 b707
            //     0x0000040: 0cb3 00fc 1307 0eb8 0713 b113 070e b807
            //     0x0000050: 13bf                                   
            //   Exception Handler Table:
            //     bci [0, 75] => handler: 75
            //   Stackmap Table:
            //     same_locals_1_stack_item_extended(@75,Object[#1587])
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test09() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        Product product0 = new Product();
        workspaceSnapshot0.definingProduct = product0;
        SQLDialect sQLDialect0 = SQLDialect.MARIADB;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(sQLDialect0);
        // Undeclared exception!
        try {
            workspaceSnapshot0.load(defaultDSLContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Cannot execute query. No Connection configured
            //
            assertThrownBy("org.jooq.impl.AbstractQuery", e);
        }
    }

    @Test(timeout = 4000)
    public void test10() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        Product product0 = new Product();
        workspaceSnapshot0.definingProduct = product0;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext((SQLDialect) null);
        // Undeclared exception!
        try {
            workspaceSnapshot0.load(defaultDSLContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("org.jooq.impl.AbstractScope", e);
        }
    }

    @Test(timeout = 4000)
    public void test11() throws Throwable {
        UUID uUID0 = UUID.randomUUID();
        SQLDialect sQLDialect0 = SQLDialect.MYSQL;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(sQLDialect0);
        // Undeclared exception!
        try {
            WorkspaceSnapshot.getAuthorizations(uUID0, defaultDSLContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Cannot execute query. No Connection configured
            //
            assertThrownBy("org.jooq.impl.AbstractQuery", e);
        }
    }

    @Test(timeout = 4000)
    public void test12() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                PGPoolingDataSource pGPoolingDataSource0 = new PGPoolingDataSource();
                @SuppressWarnings("deprecation")
                SQLDialect sQLDialect0 = SQLDialect.SQL99;
                DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(pGPoolingDataSource0,
                                                                             sQLDialect0);
                // Undeclared exception!
                try {
                    WorkspaceSnapshot.getAuthorizations((UUID) null,
                                                        defaultDSLContext0);
                    fail("Expecting exception: RuntimeException");

                } catch (RuntimeException e) {
                    //
                    // Error getting connection from data source org.postgresql.ds.PGPoolingDataSource@1
                    //
                    assertThrownBy("org.jooq.impl.DataSourceConnectionProvider",
                                   e);
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }

    @Test(timeout = 4000)
    public void test13() throws Throwable {
        UUID uUID0 = new UUID(948L, 0L);
        SQLDialect sQLDialect0 = SQLDialect.CUBRID;
        Settings settings0 = new Settings();
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext((DataSource) null,
                                                                     sQLDialect0,
                                                                     settings0);
        // Undeclared exception!
        try {
            WorkspaceSnapshot.getAuthorizations(uUID0, defaultDSLContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("org.jooq.impl.DataSourceConnectionProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test14() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        DefaultConfiguration defaultConfiguration0 = new DefaultConfiguration();
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(defaultConfiguration0);
        // Undeclared exception!
        try {
            workspaceSnapshot0.deltaFrom(defaultDSLContext0,
                                         workspaceSnapshot0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test15() throws Throwable {
        SQLDialect sQLDialect0 = SQLDialect.H2;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(sQLDialect0);
        Product product0 = new Product();
        try {
            new WorkspaceSnapshot(product0, defaultDSLContext0);
            fail("Expecting exception: RuntimeException");

        } catch (RuntimeException e) {
            //
            // Cannot execute query. No Connection configured
            //
            assertThrownBy("org.jooq.impl.AbstractQuery", e);
        }
    }

    @Test(timeout = 4000)
    public void test16() throws Throwable {
        Product product0 = new Product();
        try {
            new WorkspaceSnapshot(product0, (DSLContext) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test17() throws Throwable {
        Future<?> future = executor.submit(new Runnable() {
            @Override
            public void run() {
                try {
                    WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
                    Product product0 = new Product();
                    workspaceSnapshot0.definingProduct = product0;
                    Jdbc3SimpleDataSource jdbc3SimpleDataSource0 = new Jdbc3SimpleDataSource();
                    DataSourceConnectionProvider dataSourceConnectionProvider0 = new DataSourceConnectionProvider(jdbc3SimpleDataSource0);
                    SQLDialect sQLDialect0 = SQLDialect.FIREBIRD;
                    Settings settings0 = new Settings();
                    DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(dataSourceConnectionProvider0,
                                                                                 sQLDialect0,
                                                                                 settings0);
                    // Undeclared exception!
                    try {
                        workspaceSnapshot0.load(defaultDSLContext0);
                        fail("Expecting exception: RuntimeException");

                    } catch (RuntimeException e) {
                        //
                        // Error getting connection from data source org.postgresql.jdbc3.Jdbc3SimpleDataSource@6
                        //
                        assertThrownBy("org.jooq.impl.DataSourceConnectionProvider",
                                       e);
                    }
                } catch (Throwable t) {
                    // Need to catch declared exceptions
                }
            }
        });
        future.get(4000, TimeUnit.MILLISECONDS);
    }

    @Test(timeout = 4000)
    public void test18() throws Throwable {
        Product product0 = new Product();
        PGPoolingDataSource pGPoolingDataSource0 = PGPoolingDataSource.getDataSource("");
        SQLDialect sQLDialect0 = SQLDialect.MARIADB;
        Settings settings0 = new Settings();
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(pGPoolingDataSource0,
                                                                     sQLDialect0,
                                                                     settings0);
        try {
            new WorkspaceSnapshot(product0, defaultDSLContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("org.jooq.impl.DataSourceConnectionProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test19() throws Throwable {
        UUID uUID0 = UUID.randomUUID();
        // Undeclared exception!
        try {
            WorkspaceSnapshot.getAuthorizations(uUID0, (DSLContext) null);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test20() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        List<UpdatableRecord<? extends UpdatableRecord<?>>> list0 = workspaceSnapshot0.getRecords();
        assertTrue(list0.isEmpty());
    }

    @Test(timeout = 4000)
    public void test21() throws Throwable {
        SQLDialect sQLDialect0 = SQLDialect.POSTGRES_9_5;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(sQLDialect0);
        URL uRL0 = MockURL.getHttpExample();
        // Undeclared exception!
        try {
            WorkspaceSnapshot.load(defaultDSLContext0, uRL0);
            fail("Expecting exception: VerifyError");

        } catch (VerifyError e) {
            //
            // Bad type on operand stack
            // Exception Details:
            //   Location:
            //     com/fasterxml/jackson/databind/ObjectMapper.<clinit>()V @62: invokespecial
            //   Reason:
            //     Type 'com/fasterxml/jackson/databind/util/StdDateFormat' (current frame, stack[8]) is not assignable to 'java/text/DateFormat'
            //   Current Frame:
            //     bci: @62
            //     flags: { }
            //     locals: { }
            //     stack: { uninitialized 35, uninitialized 35, null, 'com/fasterxml/jackson/databind/AnnotationIntrospector', 'com/fasterxml/jackson/databind/introspect/VisibilityChecker', null, 'com/fasterxml/jackson/databind/type/TypeFactory', null, 'com/fasterxml/jackson/databind/util/StdDateFormat', null, 'java/util/Locale', null, 'com/fasterxml/jackson/core/Base64Variant' }
            //   Bytecode:
            //     0x0000000: 1304 16b8 06ef b304 14bb 06f1 59b7 06f2
            //     0x0000010: b306 e5b8 06f5 b306 e7bb 06f7 59b7 06f8
            //     0x0000020: b306 e9bb 0102 5901 b206 e5b2 06e7 01b8
            //     0x0000030: 00f7 01b2 06fd 01b8 0703 01b8 0709 b707
            //     0x0000040: 0cb3 00fc 1307 0eb8 0713 b113 070e b807
            //     0x0000050: 13bf                                   
            //   Exception Handler Table:
            //     bci [0, 75] => handler: 75
            //   Stackmap Table:
            //     same_locals_1_stack_item_extended(@75,Object[#1587])
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test22() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        Jdbc3SimpleDataSource jdbc3SimpleDataSource0 = new Jdbc3SimpleDataSource();
        DataSourceConnectionProvider dataSourceConnectionProvider0 = new DataSourceConnectionProvider(jdbc3SimpleDataSource0);
        SQLDialect sQLDialect0 = SQLDialect.FIREBIRD;
        Settings settings0 = new Settings();
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext(dataSourceConnectionProvider0,
                                                                     sQLDialect0,
                                                                     settings0);
        // Undeclared exception!
        try {
            workspaceSnapshot0.load(defaultDSLContext0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test23() throws Throwable {
        SQLDialect sQLDialect0 = SQLDialect.SQLITE;
        DefaultDSLContext defaultDSLContext0 = new DefaultDSLContext((DataSource) null,
                                                                     sQLDialect0,
                                                                     (Settings) null);
        Product product0 = new Product();
        // Undeclared exception!
        try {
            WorkspaceSnapshot.selectWorkspaceClosure(defaultDSLContext0,
                                                     product0);
            fail("Expecting exception: NullPointerException");

        } catch (NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("org.jooq.impl.DataSourceConnectionProvider", e);
        }
    }

    @Test(timeout = 4000)
    public void test24() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        Product product0 = workspaceSnapshot0.getDefiningProduct();
        assertNull(product0);
    }

    @Test(timeout = 4000)
    public void test25() throws Throwable {
        WorkspaceSnapshot workspaceSnapshot0 = new WorkspaceSnapshot();
        ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
        // Undeclared exception!
        try {
            workspaceSnapshot0.serializeTo(byteArrayOutputStream0);
            fail("Expecting exception: VerifyError");

        } catch (VerifyError e) {
            //
            // Bad type on operand stack
            // Exception Details:
            //   Location:
            //     com/fasterxml/jackson/databind/ObjectMapper.<clinit>()V @62: invokespecial
            //   Reason:
            //     Type 'com/fasterxml/jackson/databind/util/StdDateFormat' (current frame, stack[8]) is not assignable to 'java/text/DateFormat'
            //   Current Frame:
            //     bci: @62
            //     flags: { }
            //     locals: { }
            //     stack: { uninitialized 35, uninitialized 35, null, 'com/fasterxml/jackson/databind/AnnotationIntrospector', 'com/fasterxml/jackson/databind/introspect/VisibilityChecker', null, 'com/fasterxml/jackson/databind/type/TypeFactory', null, 'com/fasterxml/jackson/databind/util/StdDateFormat', null, 'java/util/Locale', null, 'com/fasterxml/jackson/core/Base64Variant' }
            //   Bytecode:
            //     0x0000000: 1304 16b8 06ef b304 14bb 06f1 59b7 06f2
            //     0x0000010: b306 e5b8 06f5 b306 e7bb 06f7 59b7 06f8
            //     0x0000020: b306 e9bb 0102 5901 b206 e5b2 06e7 01b8
            //     0x0000030: 00f7 01b2 06fd 01b8 0703 01b8 0709 b707
            //     0x0000040: 0cb3 00fc 1307 0eb8 0713 b113 070e b807
            //     0x0000050: 13bf                                   
            //   Exception Handler Table:
            //     bci [0, 75] => handler: 75
            //   Stackmap Table:
            //     same_locals_1_stack_item_extended(@75,Object[#1587])
            //
            assertThrownBy("com.chiralbehaviors.CoRE.workspace.WorkspaceSnapshot",
                           e);
        }
    }
}
