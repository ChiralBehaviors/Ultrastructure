workspace: "urn:uuid:00000000-0000-0004-0000-000000000003"  
           version: 3
           "Ultrastructure Kernel Workspace" 
           "The Kernel Ontology for Ultrastructure [Ain Soph Ur]"


agencies {
    CoreUser = "CoRE User" "Ultrastructure CoRE API user";
    SuperUser = "Ultrastructure Super User" "Ye Root";
    UnauthenticatedAgency = "Unauthenticated" "The unauthenticaed agency";
    LoginRole = "Login Role" "The Login role";
    edges {
        SuperUser.IsA.CoreUser
        UnauthenticatedAgency.IsA.CoreUser
        LoginRole.IsA.Role
    }
    facets {
        IsA.CoreUser { Login PasswordRounds PasswordHash AccessToken }
            constraints {
                one DefaultRole: IsA.Role named by relationship
                n HasRole: IsA.Role named role
            }
        IsA.Role { RoleName }
            constraints {
                n RoleOf: IsA.CoreUser named grant
                n MemberOf: IsA.Role named inherit
                n HasMember: IsA.Role named member
            }
        InstanceOf.Core named: "Core Instance"
            constraints {
                n MayLoginBy: IsA.CoreUser named login
            }
        SingletonOf.Core named: "This Core Instance"
    }
}      

attributes {
    Namespace = "Namespace" "The namespace of an import" text;
    LookupOrder = "Lookup Order" "The lookup order for an import" int;
    IRI = "IRI" "The Attribute that contains an International Resource Indicator" text;
    Login = "Login" "The Attribute that contains the login name of the agency" text;
    PasswordRounds = "Password Rounds" "The number of rounds to hash the password" int;
    PasswordHash = "Password Hash" "The hash the password" text;
    AccessToken = "Access Token" "The access bearer token" indexed: true json;
    
    RoleName = "Role Name" "The role name" text;
    PackageName = "Package Name" "The base package name" text;
    FacetName = "Facet Name" "The name of a phantasm facet in a workspace" text;
    InputType = "Input Type" "The input type of an argument" text;
    ReturnType = "Return Type" "The return type of an method" text;
    ImplementationClass = "Implementation Class" "The implementing class" text;
    ImplementationMethod = "Implementation Method" "The name of the implementing method" text;
    Mutator = "Mutator Method" "A method that mutates state" bool;
}

products { 
    Plugin = "Plugin" "A plugin for the Ultrastructure Phantasm API";
    Argument = "Argument" "An input argument to a method";
    InstanceMethod = "Instance Method" "An exposed instance method on a phatasm facet";
    StaticMethod = "Static method" "A phantasm facet scoped static method in a workspace";
    Constructor = "Constructor" "A constructor that is called when the phantasm facet is applied";
    
    edges {
        KernelWorkspace.IsA.Workspace
    }
    facets {
        IsA.Workspace { IRI }
            constraints {
                n HasPlugin: IsA.Plugin
                n Imports: IsA.Workspace named import
                    { Namespace LookupOrder } 
            }
            
        IsA.Plugin { FacetName PackageName }
            constraints {
                n HasStaticMethod: IsA.StaticMethod
                one HasConstructor: IsA.Constructor
                n HasInstanceMethod: IsA.InstanceMethod
            }
        
        IsA.Argument { InputType }
        
        IsA.InstanceMethod { ReturnType ImplementationClass ImplementationMethod Mutator }
            constraints {
                n HasArgument: IsA.Argument
            }
            
       IsA.StaticMethod { ReturnType ImplementationClass ImplementationMethod }
            constraints {
                n HasArgument: IsA.Argument
            }
            
        IsA.Constructor { ImplementationClass ImplementationMethod }
    }
}

relationships {
    RoleOf = "Role Of" "A is a role of B" | HasRole = "Has Role" "A has role B";
    InstanceOf = "Instance Of" "A is an instance of B" | HasInstance = "Has Instance" "A has instance B";
    SingletonOf = "Singleton Of" "A is the singleton instance of B" | HasSingleton = "Has Singleton" "A has singleton instance B";
    
    IsPluginOf = "Is Plugin Of" "A is a plugin of the workspace B" | HasPlugin = "Has Plugin" "A has a plugin B";
    IsArgumentOf = "Is Argument Of" "A is an argument for the method B" | HasArgument = "Has Argument" "A has an argument B";
    IsInstanceMethodOf = "Is Instance Method Of" "A is an instance method of B" | HasInstanceMethod = "Has Instance Method" "A has an instance method B";
    IsStaticMethodOf = "Is Static Method Of" "A is a static method of B" | HasStaticMethod = "Has Static Method" "A has a static method B";
    IsCodeSourceOf = "Is Code Source Of" "A is a JVM code source of B" | HasCodeSource = "Has Code Source" "A has code source B";
    IsConstructorOf = "Is Constructor Of" "A is a constructor of B" | HasConstructor = "HasConstructor" "A has constructor B";
    
    Permission = "Permission" "The defining permission classification";
    CREATE = "Create" "The create permission" | MayBeCreatedBy = "May Be Created By" "May Be Created By";
    READ = "Read" "The read permission" | MayBeReadBy = "May Be Read By" "The inverse read permission";
    UPDATE = "Update" "The update permission" | MayBeUpdatedBy = "May Be Updated By" "The inverse update permission";
    DELETE = "Delete" "The delete permission" | MayBeDeletedBy = "May Be Deleted By" "The inverse delete permission";
    APPLY = "Apply" "The apply permission" | MayBeAppliedBy = "May Be Applied By" "The inverse apply permission";
    REMOVE = "Remove" "The remove permission" | MayBeRemovedBy = "May Be Removed By" "The inverse remove permission";
    INVOKE = "Invoke" "The invoke permission" | MayBeInvokedBy = "May Be Invoked By" "The inverse invoke permission";
    EXECUTE_QUERY = "Execute Query" "The execute query permission" | QueryExecutedBy = "Query may be executed By" "The inverse execute query permission"; 
    LOGIN_TO = "Login" "The login permission" | MayLoginBy = "Login may be done By" "The inverse login permission";
    
    DefaultRole = "Default Role" "A has default role B" | DefaultRoleOf = "Default Role Of" "A is the default role of B";
    
    edges {
        APPLY.IsA.Permission
        REMOVE.IsA.Permission
        CREATE.IsA.Permission
        READ.IsA.Permission
        UPDATE.IsA.Permission
        DELETE.IsA.Permission
        INVOKE.IsA.Permission
        EXECUTE_QUERY.IsA.Permission
        LOGIN_TO.IsA.Permission
    }
    facets {
        IsA.Permission
    } 
}


inferences {
    HasMember.HasMember.HasMember
}
