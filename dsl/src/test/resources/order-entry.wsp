workspace: "uri:http://ultrastructure.me/ontology/com.chiralbehaviors/demo/order-entry/v1" 
           "Order Entry"
           "Pricing example for CACM 1995 Ultrastructure article"

agencies {
    billingComputer = "Billing CPU" "Billing computer";
    cpu = "CPU" "General purpose computer";
    creditDept = "Credit Department" "The credit department";
    exempt = "Exempt" "Exempt from sales tax";
    externalCust = "External Customer" "External (paying) customer";
    factory1Agency = "Factory 1" "Factory #1";
    georgeTownUniversity = "GU" "Georgetown University";
    cafleurBon = "carfleurBon" "Carfleur Bon";
    manufacturer = "MNFR" "Manufacturer";
    nonExemptAgency = "Non Exempt" "Non tax exempt";
    orgA = "OrgA" "Organization A";
    orderFullfillment = "Order Fullfillment" "Order Fullfillment";
}
attributes {
        price = "price"  "price" int; 
        taxRate = "tax rate" "tax rate" numeric;
        discountRate = "discount" "discount" numeric;
}
intervals {
    day = "Day" "A single day";
    week = "Week" "A seven day week";
}
locations {
    rsb225 = "225RSB" "225 Reiss Science Bldg";
    bht37 = "37BHT" "37 Bret Harte Terrace";
    rc31 = "31rc" "1 Rue Cambon";
    dc = "DC" "District of Columbia";
    eastCoast = "EAST_COAST" "East Coast";
    france = "France" "The country of France";
    paris = "Paris" "The city Paris";
    us = "United States" "US locations";
    euro = "Europe" "EU locations";
    factory1 = "Factory 1" "Factory #1";
    bin1 = "Bin 1";
    bin15 = "Bin 15";
    edges {
        bin1.area.factory1
        bin15.area.factory1
        rsb225.city.dc
        bht37.city.dc
        rc31.city.paris
        dc.region.eastCoast
        eastCoast.area.us
        paris.region.france
        france.area.euro
    }
}
products {
    pricedProduct = "Priced Product" "A product we sell";
    abc486 = "abc486" "Laptop computer";
    frozen = "frozen" "Frozen Products";
    chemB = "ChemB" "Chemical B";
    roomTemp = "RoomTemp" "Room temperature products";
    nonExempt = "nonExempt" "Non tax exempt products";
    deliver = "Deliver" "Deliver product";
    pick = "Pick" "Pick inventory";
    ship = "Ship" "Ship inventory";
    checkCredit = "CheckCredit" "Check customer in-house credit";
    checkLetterOfCredit = "CheckLetterOfCredit" "Check customer letter of credit";
    discount = "Discount" "Compute fee discount";
    fee = "Fee" "Compute fee";
    printCustomsDeclaration = "PrintCustomsDeclaration" "Print the customs declaration";
    printPurchaseOrder = "PrintPurchaseOrder" "Print the purchase order";
    salesTax = "SalesTax" "Compute sales tax";
    edges {
        abc486.storageType.roomTemp
        abc486.salesTaxStatus.nonExempt
        chemB.storageType.frozen
    }
    facets {
        kernel::IsA.pricedProduct 
        attributes: { price }
    }
}
relationships {
    area = "Area" "A is a member of the economic community B" | areaOf = "Area Of" "A is economic community of B";
    city = "City" "A is located in the City B" | cityOf = "City Of" "A is the city of B";
    customerType = "Customer Type" "A has customer type of B" | customerTypeOf = "Customer Type Of" "A is the customer type of B";
    region = "Region" "The general region of A is B" | regionOf = "Region Of" "A is the general region of B";
    state = "State" "A is located in the state B" | stateOf = "State Of" "A is the state of B";
    salesTaxStatus = "Sales Tax Status" "The sales tax status of A is B" | salesTaxStatusOf = "Sales Tax Status Of" "A is the sales tax status of B";
    storageType = "StorageType" "The type of storage required for A is B" | storageTypeOf = "StorageType Of" "A is the storage type of B";
    street = "Street" "A is located on the street B" | streetOf = "Street Of" "A is the street of B";
}
status codes {
    available = "Available"  "Job is available for processing";
    active = "Active" "Working on it now";
    waitingOnCreditCheck = "Waiting on Credit Check" "Waiting on credit check to be completed";
    completed = "Completed" "Completed job";
    failure = "Failure" "Something went pear shaped";
    pickCompleted = "Pick Completed" "Pick product has been completed";
    waitingOnPurchaseOrder = "Waiting on the purchace order" "Waiting for the purchase order to be complete";
    waitingOnPricing = "Waiting on pricing" "Waiting for pricing to be completed";
    waitingOnFee = "Waiting on fee calculation" "Waiting for fee calculation to be completed";
    abandoned = "Job abandoned"  "We were going to do it, something happened in earlier processing that will prevent us from proceeding";
}
status code sequencings {
    pick: {
           waitingOnCreditCheck available
           available active 
           active completed
           }
    ship: {
        waitingOnPurchaseOrder available 
        available active 
        active completed
        }
    deliver: {
        available active
        active completed
        }
    checkCredit: {
        available active
        active completed
        }
    checkLetterOfCredit: {
        available active
        active completed
        }
    discount: {
        available active
        active completed
        }
    fee: {
        available active
        active completed
        }
    printCustomsDeclaration: {
        waitingOnFee available
        available active
        active completed
        }
    printPurchaseOrder: {
        waitingOnFee available
        available active
        active completed
        }
    salesTax: {
        available active
        active completed
        }
}
units {
    dollar = "Dollar" "US Dollar" number;
    cent = "Cent" "US Cent" number;
    percentage = "Percentage" "Percentage" number min: 0 max: 100;
}
sequencing auths {
    parent {
        service: pick
        status: completed
        parent: deliver
        next: completed
        activeSiblings: false
        
        service: checkCredit
        status: completed
        parent: pick
        next: available
        activeSiblings: false
        
        service: printCustomsDeclaration
        status: completed
        parent: ship
        next: available
        activeSiblings: false
        
        service: printPurchaseOrder
        status: completed
        parent: ship
        next: available
        activeSiblings: false
        
        service: discount
        status: completed
        parent: printPurchaseOrder
        next: available
        activeSiblings: false
        
        service: ship
        status: completed
        parent: deliver
        next: completed
        activeSiblings: false
    }
    sibling {
        parent: printPurchaseOrder
        status: completed
        sibling: deliver
        next: completed
        
        parent: fee
        status: completed
        sibling: discount
        next: available
    }
    child {
        parent: ship
        status: waitingOnPurchaseOrder
        child: printPurchaseOrder
        next: waitingOnFee
        
        parent: pick
        status: waitingOnCreditCheck
        child: checkCredit
        next: available
        
        parent: printPurchaseOrder
        status: waitingOnFee
        child: fee
        next: available
        
        parent: deliver
        status: available
        child: pick
        next: waitingOnCreditCheck
    }
}
inferences {
    areaOf.regionOf.areaOf
    areaOf.stateOf.areaOf
    areaOf.cityOf.areaOf
    areaOf.streetOf.areaOf
    regionOf.stateOf.regionOf
    regionOf.cityOf.regionOf
    regionOf.streetOf.regionOf
    stateOf.cityOf.stateOf
    stateOf.streetOf.stateOf
    cityOf.streetOf.cityOf
}
protocols {
        service: deliver product: kernel::AnyProduct from: kernel::AnyLocation to: kernel::AnyLocation
        ->
        service: pick product: kernel::SameProduct assign: factory1Agency
        
        service: pick product: kernel::AnyProduct from: us to: us requester: externalCust
        ->
        service: checkCredit product: kernel::SameProduct assign: cpu
        
        service: pick product: kernel::AnyProduct from: us to: euro
        ->
        service: checkLetterOfCredit product: kernel::SameProduct assign: creditDept
        
        service: deliver product: kernel::AnyProduct from: kernel::AnyLocation to: kernel::AnyLocation 
        requester: kernel::AnyAgency
        ->
        service: ship product: kernel::SameProduct assign: factory1Agency
        
        service: ship product: abc486 from: us to: euro
        ->
        service: printCustomsDeclaration product: kernel::SameProduct assign: cpu
        
        service: ship product: abc486 from: us to: kernel::AnyLocation
        ->
        service: printPurchaseOrder product: kernel::SameProduct assign: cpu 
        
        service: printPurchaseOrder product: abc486 from: us to: kernel::AnyLocation requester: kernel::AnyAgency
        -> 
        service: fee product: kernel::SameProduct assign: billingComputer
        
        service: fee product: nonExempt from: kernel::AnyLocation to: dc requester: nonExemptAgency 
        ->
        service: salesTax product: kernel::SameProduct assign: billingComputer
        
        service: fee product: abc486 from: us to: euro requester: externalCust
        ->
        service: discount product: kernel::SameProduct assign: billingComputer
        
        service: fee product: abc486 from: us to: dc requester: georgeTownUniversity
        ->
        service: salesTax product: kernel::SameProduct assign: billingComputer
}
meta protocols {
        transform: deliver
        product: kernel::AnyRelationship
        from: area
        to: state
        
        transform: pick
        product: kernel::AnyRelationship
        from: area
        to: area 
        requester: customerType
        
        transform: ship
        product: kernel::AnyRelationship
        from: area
        to: area 
        requester: customerType
        
        transform: fee
        product: kernel::AnyRelationship
        to: city
        requester: salesTaxStatus 
        
        transform: printPurchaseOrder
        product: kernel::AnyRelationship
        from: area
        to: kernel::AnyRelationship
        requester: kernel::AnyRelationship
}
