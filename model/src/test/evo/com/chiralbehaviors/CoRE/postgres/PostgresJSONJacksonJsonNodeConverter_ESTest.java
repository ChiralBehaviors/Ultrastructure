/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 08 20:10:27 GMT 2016
 */

package com.chiralbehaviors.CoRE.postgres;

import static org.evosuite.runtime.EvoAssertions.assertThrownBy;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.LongNode;
import com.fasterxml.jackson.databind.node.NullNode;

@RunWith(EvoRunner.class)
@EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true)
public class PostgresJSONJacksonJsonNodeConverter_ESTest
        extends PostgresJSONJacksonJsonNodeConverter_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test0() throws Throwable {
        LongNode longNode0 = LongNode.valueOf(1331L);
        PostgresJSONJacksonJsonNodeConverter postgresJSONJacksonJsonNodeConverter0 = new PostgresJSONJacksonJsonNodeConverter();
        // Undeclared exception!
        try {
            postgresJSONJacksonJsonNodeConverter0.to(longNode0);
            fail("Expecting exception: VerifyError");

        } catch (VerifyError e) {
            //
            // Bad type on operand stack
            // Exception Details:
            //   Location:
            //     com/fasterxml/jackson/databind/ObjectMapper.<clinit>()V @62: invokespecial
            //   Reason:
            //     Type 'com/fasterxml/jackson/databind/util/StdDateFormat' (current frame, stack[8]) is not assignable to 'java/text/DateFormat'
            //   Current Frame:
            //     bci: @62
            //     flags: { }
            //     locals: { }
            //     stack: { uninitialized 35, uninitialized 35, null, 'com/fasterxml/jackson/databind/AnnotationIntrospector', 'com/fasterxml/jackson/databind/introspect/VisibilityChecker', null, 'com/fasterxml/jackson/databind/type/TypeFactory', null, 'com/fasterxml/jackson/databind/util/StdDateFormat', null, 'java/util/Locale', null, 'com/fasterxml/jackson/core/Base64Variant' }
            //   Bytecode:
            //     0x0000000: 1304 16b8 06ef b304 14bb 06f1 59b7 06f2
            //     0x0000010: b306 e5b8 06f5 b306 e7bb 06f7 59b7 06f8
            //     0x0000020: b306 e9bb 0102 5901 b206 e5b2 06e7 01b8
            //     0x0000030: 00f7 01b2 06fd 01b8 0703 01b8 0709 b707
            //     0x0000040: 0cb3 00fc 1307 0eb8 0713 b113 070e b807
            //     0x0000050: 13bf                                   
            //   Exception Handler Table:
            //     bci [0, 75] => handler: 75
            //   Stackmap Table:
            //     same_locals_1_stack_item_extended(@75,Object[#1587])
            //
            assertThrownBy("com.chiralbehaviors.CoRE.postgres.PostgresJSONJacksonJsonNodeConverter",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test1() throws Throwable {
        PostgresJSONJacksonJsonNodeConverter postgresJSONJacksonJsonNodeConverter0 = new PostgresJSONJacksonJsonNodeConverter();
        Object object0 = postgresJSONJacksonJsonNodeConverter0.to((JsonNode) null);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test2() throws Throwable {
        PostgresJSONJacksonJsonNodeConverter postgresJSONJacksonJsonNodeConverter0 = new PostgresJSONJacksonJsonNodeConverter();
        NullNode nullNode0 = (NullNode) postgresJSONJacksonJsonNodeConverter0.from((Object) null);
        Object object0 = postgresJSONJacksonJsonNodeConverter0.to(nullNode0);
        assertNull(object0);
    }

    @Test(timeout = 4000)
    public void test3() throws Throwable {
        PostgresJSONJacksonJsonNodeConverter postgresJSONJacksonJsonNodeConverter0 = new PostgresJSONJacksonJsonNodeConverter();
        Class<JsonNode> class0 = postgresJSONJacksonJsonNodeConverter0.toType();
        // Undeclared exception!
        try {
            postgresJSONJacksonJsonNodeConverter0.from(class0);
            fail("Expecting exception: VerifyError");

        } catch (VerifyError e) {
            //
            // Bad type on operand stack
            // Exception Details:
            //   Location:
            //     com/fasterxml/jackson/databind/ObjectMapper.<clinit>()V @62: invokespecial
            //   Reason:
            //     Type 'com/fasterxml/jackson/databind/util/StdDateFormat' (current frame, stack[8]) is not assignable to 'java/text/DateFormat'
            //   Current Frame:
            //     bci: @62
            //     flags: { }
            //     locals: { }
            //     stack: { uninitialized 35, uninitialized 35, null, 'com/fasterxml/jackson/databind/AnnotationIntrospector', 'com/fasterxml/jackson/databind/introspect/VisibilityChecker', null, 'com/fasterxml/jackson/databind/type/TypeFactory', null, 'com/fasterxml/jackson/databind/util/StdDateFormat', null, 'java/util/Locale', null, 'com/fasterxml/jackson/core/Base64Variant' }
            //   Bytecode:
            //     0x0000000: 1304 16b8 06ef b304 14bb 06f1 59b7 06f2
            //     0x0000010: b306 e5b8 06f5 b306 e7bb 06f7 59b7 06f8
            //     0x0000020: b306 e9bb 0102 5901 b206 e5b2 06e7 01b8
            //     0x0000030: 00f7 01b2 06fd 01b8 0703 01b8 0709 b707
            //     0x0000040: 0cb3 00fc 1307 0eb8 0713 b113 070e b807
            //     0x0000050: 13bf                                   
            //   Exception Handler Table:
            //     bci [0, 75] => handler: 75
            //   Stackmap Table:
            //     same_locals_1_stack_item_extended(@75,Object[#1587])
            //
            assertThrownBy("com.chiralbehaviors.CoRE.postgres.PostgresJSONJacksonJsonNodeConverter",
                           e);
        }
    }

    @Test(timeout = 4000)
    public void test4() throws Throwable {
        PostgresJSONJacksonJsonNodeConverter postgresJSONJacksonJsonNodeConverter0 = new PostgresJSONJacksonJsonNodeConverter();
        Class<Object> class0 = postgresJSONJacksonJsonNodeConverter0.fromType();
        assertFalse(class0.isInterface());
    }
}
