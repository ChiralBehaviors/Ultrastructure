group workspace;

generate(imports, types, variables, columns) ::= <<
/**
 * AUTOGENERATED! DO NOT EDIT BY HAND.
 * Generated by WorkspaceGenerator.java
 * 
 * (C) Copyright 2014 Chiral Behaviors, LLC. All Rights Reserved
 *
 
 * This file is part of Ultrastructure.
 *
 *  Ultrastructure is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 *  ULtrastructure is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Ultrastructure.  If not, see <http://www.gnu.org/licenses/>.
 */

package com.chiralbehaviors.CoRE.workspace;

import com.chiralbehaviors.CoRE.Ruleform;
import javax.persistence.Entity;
import javax.persistence.Column;
import javax.persistence.ManyToOne;
import javax.persistence.JoinColumn;
import javax.persistence.Table;

<imports: {decl| import <decl>;<\n>}>

@Entity
@Table(name = "workspace_authorization", schema = "ruleform")
public class WorkspaceAuthorization extends Ruleform {
    private static final long   serialVersionUID      = 1L;
    
    @Column(name="defining_product")
    private Product definingProduct;
    
    @Column(name="type")
    private String type;
<types, variables, columns: {type, var, column |
    
    @ManyToOne
    @JoinColumn(name = "<column>")
    private <type> <var>;<\n>}>

    public String getType() {
        return type;
    }
    
    public Product getDefiningProduct() {
        return definingProduct;
    }
    
    public void setDefiningProduct(Product definingProduct) {
        this.definingProduct = definingProduct;
    }
    
    @SuppressWarnings("unchecked")
    public \<T extends Ruleform\> T getEntity() {
        switch (type) {
<types: {t |
            case "<t>":
                return (T) get<t>();<\n>}>
            default:
                throw new IllegalStateException(String.format("Invalid type: %s", type));
        }
    }
    
<types, variables: {type, var |
    public <type> get<type>() {
        return <var>;
    \}<\n>
    public void set<type>(<type> <var>) {
        this.type ="<type>";
        this.<var> = <var>;
    \}<\n>}>
}
>>