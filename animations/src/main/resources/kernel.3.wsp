workspace: 'urn:uuid:00000000-0000-0004-0000-000000000003'  
           version: 3
           'Ultrastructure Kernel Workspace' 
           'The Kernel Ontology for Ultrastructure [Ain Soph Ur]'


agencies {
    CoreUser = 'Core User' 'Ultrastructure CoRE API user';
    SuperUser = 'Ultrastructure Super User' 'Ye Root';
    UnauthenticatedAgency = 'Unauthenticated' 'The unauthenticaed agency';
    LoginRole = 'Login Role' 'The Login role';
    edges {
        SuperUser.IsA.CoreUser
        UnauthenticatedAgency.IsA.CoreUser
        LoginRole.IsA.Role
    }
    facets {
        IsA.CoreUser { Login PasswordRounds PasswordHash AccessToken }
            constraints {
                one DefaultRole: IsA.Role named by relationship
                n HasRole: IsA.Role named role
                one DefaultClassification: IsA.Classification named by relationship
            }
        IsA.Role
            constraints {
                n RoleOf: IsA.CoreUser named grant
                n MemberOf: IsA.Role named inherit
                n HasMember: IsA.Role named member
            }
        IsA.Classification
            constraints { 
                n ClassifiedBy: IsA.Classification named inherit
                n ClassificationOf: IsA.Classification named member
            }
        InstanceOf.Core named: 'Core Instance'
            constraints {
                n MayLoginBy: IsA.CoreUser named login
            }
        SingletonOf.Core named: 'This Core Instance'
    }
}      

attributes {
    Namespace = 'Namespace' 'The namespace of an import' text;
    LookupOrder = 'Lookup Order' 'The lookup order for an import' int;
    IRI = 'IRI' 'The Attribute that contains an International Resource Indicator' text;
    Login = 'Login' 'The Attribute that contains the login name of the agency' text;
    PasswordRounds = 'Password Rounds' 'The number of rounds to hash the password' int;
    PasswordHash = 'Password Hash' 'The hash the password' text;
    AccessToken = 'Access Token' 'The access bearer token' indexed: true json;
}

products { 
    edges {
        KernelWorkspace.IsA.Workspace
    }
    facets {
        IsA.Workspace { IRI }
            constraints {
                n Imports: IsA.Workspace named import
                    { Namespace LookupOrder } 
            }
    }
}

relationships {
    RoleOf = 'Role Of' 'A is a role of B' | HasRole = 'Has Role' 'A has role B';
    ClassifiedBy = 'Classified By' 'A is classified by B' | ClassificationOf = 'Classification Of' 'A is a classification of B';
    InstanceOf = 'Instance Of' 'A is an instance of B' | HasInstance = 'Has Instance' 'A has instance B';
    SingletonOf = 'Singleton Of' 'A is the singleton instance of B' | HasSingleton = 'Has Singleton' 'A has singleton instance B';
    
    Permission = 'Permission' 'The defining permission classification';
    CREATE_META = 'Create Meta' 'A may create meta data in B' | MayBeCreatedMetaBy = 'May Be Created By' 'A allows meta creation by B';
    CREATE = 'Create' 'The create permission' | MayBeCreatedBy = 'May Be Created By' 'May Be Created By';
    READ = 'Read' 'The read permission' | MayBeReadBy = 'May Be Read By' 'The inverse read permission';
    UPDATE = 'Update' 'The update permission' | MayBeUpdatedBy = 'May Be Updated By' 'The inverse update permission';
    DELETE = 'Delete' 'The delete permission' | MayBeDeletedBy = 'May Be Deleted By' 'The inverse delete permission';
    APPLY = 'Apply' 'The apply permission' | MayBeAppliedBy = 'May Be Applied By' 'The inverse apply permission';
    REMOVE = 'Remove' 'The remove permission' | MayBeRemovedBy = 'May Be Removed By' 'The inverse remove permission';
    INVOKE = 'Invoke' 'The invoke permission' | MayBeInvokedBy = 'May Be Invoked By' 'The inverse invoke permission';
    EXECUTE_QUERY = 'Execute Query' 'The execute query permission' | QueryExecutedBy = 'Query may be executed By' 'The inverse execute query permission'; 
    LOGIN_TO = 'Login' 'The login permission' | MayLoginBy = 'Login may be done By' 'The inverse login permission';
    UPDATE_AUTHORITY = 'Update Authority' 'The update authority permission' 
                       | MayUpdateAuthorityBy = 'May Be Update Authority By' 'The inverse update authority permission';
    
    DefaultRole = 'Default Role' 'A has default role B' | DefaultRoleOf = 'Default Role Of' 'A is the default role of B';
    DefaultClassification = 'Default Classification' 'A has default classification B' 
                            | DefaultClassificationOf = 'Default Classification Of' 'A is the default classification of B';
    
    edges {
        APPLY.IsA.Permission
        REMOVE.IsA.Permission
        CREATE.IsA.Permission
        CREATE_META.IsA.Permission
        READ.IsA.Permission
        UPDATE.IsA.Permission
        DELETE.IsA.Permission
        INVOKE.IsA.Permission
        EXECUTE_QUERY.IsA.Permission
        LOGIN_TO.IsA.Permission
        UPDATE_AUTHORITY.IsA.Permission
    }
    facets {
        IsA.Permission
    } 
}


inferences {
    HasMember.HasMember.HasMember
    MemberOf.HasRole.HasRole
}
