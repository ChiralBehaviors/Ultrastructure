group networkinference;

networkInference(entityName, entityPackage, tableName, queryPrefix) ::= <<
<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm
        http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd" version="2.1">
    <!-- 
        AUTOGENERATED! DO NOT EDIT BY HAND
        Generated by NetworkInferenceQueryGenerator.java
    -->
    <entity name="%entityName%" class="%entityPackage%.%entityName%"> 
        <named-native-query name="%queryPrefix%.inference">
            <query><![CDATA[
            INSERT INTO working_memory(parent, 
                                       relationship, 
                                       child, 
                                       premise1, 
                                       premise2,
                                       inference)
                 SELECT p1.parent as parent,
                    deduction.inference as relationship,
                    p2.child as child,
                    p1.id as premise1,
                    p2.id as premise2,
                    deduction.id as inference
                 FROM ruleform.%tableName% AS p1
                 JOIN ruleform.%tableName% AS p2
                    ON p2.parent = p1.child
                    AND p2.child <> p1.parent
                 JOIN ruleform.network_inference AS deduction
                    ON p1.relationship = deduction.premise1
                    AND p2.relationship = deduction.premise2
                 LEFT OUTER JOIN %tableName% AS exist
                    ON  exist.parent = p1.parent
                    AND exist.relationship = deduction.inference
                    AND exist.child = p2.child
                 WHERE exist.id IS NULL
            ]]></query>
        </named-native-query>
        <named-native-query name="%queryPrefix%.inferenceStepFromLastPass">
            <query><![CDATA[
            INSERT INTO working_memory(parent, 
                                       relationship, 
                                       child, 
                                       premise1, 
                                       premise2,
                                       inference)
                SELECT p1.parent as parent,
                    deduction.inference as relationship,
                    p2.child as child,
                    p1.id as premise1,
                    p2.id as premise2,
                    deduction.id as inference
                FROM last_pass_rules as p1
                JOIN ruleform.%tableName% AS p2
                    ON p2.parent = p1.child
                    AND p2.child <> p1.parent
                JOIN ruleform.network_inference AS deduction
                    ON p1.relationship = deduction.premise1
                    AND p2.relationship = deduction.premise2
                 LEFT OUTER JOIN %tableName% AS exist
                    ON  exist.parent = p1.parent
                    AND exist.relationship = deduction.inference
                    AND exist.child = p2.child
                 WHERE exist.id IS NULL
            ]]></query>
        </named-native-query>
        <named-native-query name="%queryPrefix%.deduceNewNetworkRules">
            <query><![CDATA[
                SELECT wm.parent as parent, 
                       wm.relationship as relationship, 
                       wm.child as child, 
                       wm.premise1 as premise1, 
                       wm.premise2 as premise2,
                       wm.inference as inference
                FROM working_memory AS wm
            ]]></query>
        </named-native-query>
        <named-native-query name="%queryPrefix%.insertDeductions">
            <query><![CDATA[
            INSERT INTO current_pass_rules(id, 
                                           parent, 
                                           relationship, 
                                           child,
                                           inference, 
                                           premise1, 
                                           premise2)
            VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
            ]]></query>
        </named-native-query>
        <named-native-query name="%queryPrefix%.insertNewNetworkRules">
            <query><![CDATA[
           INSERT INTO ruleform.%tableName%(id, 
                                               parent, 
                                               relationship, 
                                               child, 
                                               inference,
                                               premise1, 
                                               premise2,
                                               updated_by)
               SELECT cpr.id as id, 
                      cpr.parent as parent,
                      cpr.relationship as relationship,
                      cpr.child as child,
                      cpr.inference as inference,
                      cpr.premise1 as premise1, 
                      cpr.premise2 as premise2, 
                      ?1
               FROM current_pass_rules cpr
               LEFT OUTER JOIN ruleform.%tableName% AS exist
                   ON cpr.parent = exist.parent
                   AND cpr.relationship = exist.relationship
                   AND cpr.child = exist.child
               WHERE exist.id IS NULL
            ]]></query>
        </named-native-query>
        <named-native-query name="%queryPrefix%.generateInverses">
            <query><![CDATA[
            SELECT net.child as parent,
                   rel.inverse as relationship,
                   net.parent as child,
                   net.inference as inference,
                   net.premise1 as premise1,
                   net.premise2 as premise2
            FROM ruleform.%tableName% AS net
            JOIN ruleform.relationship AS rel ON net.relationship = rel.id
            LEFT OUTER JOIN ruleform.%tableName% AS exist
                ON net.child = exist.parent
                AND rel.inverse = exist.relationship
                AND net.parent = exist.child
            WHERE exist.id IS NULL
            ]]></query>
        </named-native-query>
        <named-native-query name="%queryPrefix%.insertInverses">
            <query><![CDATA[
           INSERT INTO ruleform.%tableName%(id, 
                                               parent, 
                                               relationship, 
                                               child, 
                                               inference,
                                               premise1, 
                                               premise2,
                                               updated_by)
            VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
            ]]></query>
        </named-native-query>
    </entity>
</entity-mappings>
>>