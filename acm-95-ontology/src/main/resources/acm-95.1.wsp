workspace: 'uri:http://ultrastructure.me/ontology/com.chiralbehaviors/demo/acm-95'
           version: 1 
           'Northwind' 
           'Ultrastructure ontology for ACM 95 Ultrastructure order processing example'
imports {
    'urn:uuid:00000000-0000-0004-0000-000000000003' as kernel
}

agencies {
    ExemptAgency = 'Exempt' 'Exempt from sales tax';
    NonExemptAgency = 'Non Exempt' 'Non tax exempt';
    ExternalCust = 'External Customer' 'External (paying) customer';
    InternalCust = 'Internal Customer' 'Internal (non paying) customer';
    ComputeResource = 'Compute Resource' 'Compute system resource for doing computing';
    Department = 'Department' 'A group of employees organized by function';
    
    BillingComputer = 'Billing CPU' 'Billing computer';
    CPU = 'CPU' 'General purpose computer';
    CreditDept = 'Credit Department' 'The credit department';
    Factory1Agency = 'Factory 1' 'Factory #1';
    GeorgetownUniversity = 'GU' 'Georgetown University';
    CafleurBon = 'carfleurBon' 'Carfleur Bon';
    Manufacturer = 'MNFR' 'Manufacturer';
    OrgA = 'OrgA' 'Organization A';
    OrderFullfillment = 'Order Fullfillment' 'Order Fullfillment';
    Northwind = 'Northwind' 'Northwind, inc'; 
 
    
    edges { 
        Shipper.IsA.Company
        Supplier.IsA.Company
        Manager.IsA.Employee
        
        GeorgetownUniversity.CustomerType.ExternalCust
        GeorgetownUniversity.SalesTaxStatus.ExemptAgency
        GeorgetownUniversity.IsA.Customer
        
        OrgA.CustomerType.ExternalCust
        OrgA.IsA.Customer
        OrgA.SalesTaxStatus.NonExemptAgency
        
        CafleurBon.CustomerType.ExternalCust
        CafleurBon.IsA.Customer
        CafleurBon.SalesTaxStatus.NonExemptAgency
        
        Northwind.IsA.Company
        BillingComputer.IsA.ComputeResource
        CPU.IsA.ComputeResource
        Manufacturer.IsA.Supplier
        CreditDept.IsA.Department
        Factory1Agency.IsA.Department
        OrderFullfillment.IsA.Department
    }
    
    facets {
        IsA.Employee { LastName FirstName Title TitleOfCourtesy BirthDate HireDate }
            constraints {
                one EmployeeOf: IsA.Company
                one ReportsTo: IsA.Manager
                n HasTerritory: IsA.Territory
                n Sold: IsA.Order
                one MailingAddress: IsA.StreetAddress named by relationship
            }
        IsA.Customer { CustomerName }
            constraints {
                one CustomerType: *Agency
                one SalesTaxStatus: *Agency
                n Ordered: IsA.Order
                one ShippingAddress: IsA.StreetAddress named by relationship
            }
        IsA.Company { CompanyName }
            constraints {
                one Contact: IsA.Employee named by relationship
                one SalesTaxStatus: *Agency
                n HasEmployee: IsA.Employee
                n HasDepartment: IsA.Department
                one MailingAddress: IsA.StreetAddress named by relationship
            }
        IsA.Supplier { SupplierName }
            constraints {
                n InRegion: IsA.Region
            }
        IsA.Shipper
            constraints { 
                n InRegion: IsA.Region
            }
        IsA.Manager
            constraints { 
                n HasReport: IsA.Employee named report
            }
        IsA.ComputeResource
        IsA.Department {Name}
            constraints {
                one DepartmentOf: IsA.Company
            }
    }
}

attributes {
    LastName = 'Last Name' 'the last name' text;
    FirstName = 'First Name' 'the first name' text;
    Title = 'Title' 'Official title' text;
    TitleOfCourtesy = 'Title Of Courtesy' 'Informal title' text;
    BirthDate = 'Birthdate' 'Birthdate' timestamp;
    HireDate = 'Hire Date' 'Hire date' timestamp;
    
    CompanyName = 'Company Name' 'The name of a company' text;
    CustomerName = 'Customer Name' 'The name of a customer' text;
    SupplierName = 'Supplier Name' 'The name of a supplier' text;
    Name = 'Name' 'The name of something' text;
    CountryCode = 'Country Code' 'The short code of a contry' text;
    StateCode = 'State Code' 'The short code of a state or region' text;

    StreetNumber = 'Street Number' 'The number on a street' text;
    PostalCode = 'Postal Code' 'The postal routing code' text;
    
    OrderDate = 'Order Date' 'Date of order' timestamp;
    RequiredDate = 'Required Date' 'Date required' timestamp;
    ShipDate = 'Ship Date' 'Date shipped' timestamp;
    
    DiscountPercentage = 'Discount' 'discount percentage' numeric;
    Quantity = 'Quantity' 'quantity' int; 
    UnitPrice = 'Unit Price'  'unit price' numeric; 
    TaxRate = 'Tax Rate' 'tax rate' numeric;
    
    Picture = 'picture' 'A digital picture' type: '@id' binary;
}

locations {

    DC = 'DC' 'District of Columbia';
    EastCoast = 'East Coast' 'East Coast';
    WestCoast = 'West Coast' 'The Left Coast';
    France = 'France' 'The country of France';
    Paris = 'Paris' 'The city Paris';
    US = 'United States' 'US locations';
    Euro = 'Europe' 'EU locations';
    Rsb225 = '225RSB' '225 Reiss Science Bldg';
    Bht37 = '37BHT' '37 Bret Harte Terrace';
    Rc31 = '31rc' '31 Rue Cambon'; 
    Factory1 = 'Factory 1' 'Factory #1';
    Bin1 = 'Bin 1';
    Bin15 = 'Bin 15'; 

    edges {
        US.IsA.Area
        US.IsA.Country
        EastCoast.IsA.Region
        WestCoast.IsA.Region
        Euro.IsA.Area
        DC.IsA.City
        Paris.IsA.City
        Factory1.IsA.Area
    
        Bin1.InArea.Factory1
        Bin15.InArea.Factory1
        Rsb225.InCity.DC
        Bht37.InCity.DC
        Rc31.InCity.Paris
        DC.InRegion.EastCoast
        EastCoast.InArea.US
        Paris.InRegion.France
        France.InArea.Euro
        Factory1.OnStreet.Bht37
    } 
    
    facets {
        IsA.Region {Name}
        IsA.Country
            constraints {
                one InRegion: IsA.Region
            }
        IsA.Area {Name}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
            }
        IsA.StateOrProvince {Name StateCode}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
                n InArea: IsA.Area
            }
        IsA.City {Name}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
                one InArea: IsA.Area
                one InStateOrProvince: IsA.StateOrProvince
            }
        IsA.Street {Name}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
                one InArea: IsA.Area
                one InStateOrProvince: IsA.StateOrProvince
                one InCity: IsA.City
            }
        IsA.StreetAddress {StreetNumber PostalCode}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
                one InArea: IsA.Area
                one InStateOrProvince: IsA.StateOrProvince
                one InCity: IsA.City
                one OnStreet: IsA.Street
            }
        IsA.Territory {Name}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
                one InArea: IsA.Area
                one InStateOrProvince: IsA.StateOrProvince
                one InCity: IsA.City
            }
        IsA.StockLocation {Name}
            constraints {
                one InRegion: IsA.Region
                one InCountry: IsA.Country
                one InArea: IsA.Area
                one InStateOrProvince: IsA.StateOrProvince
                one InCity: IsA.City
                one OnStreet: IsA.Street
                one AtAddress: IsA.StreetAddress
            }
    }
}

products {   
    RoomTemp = 'RoomTemp' 'Room temperature products';
    Frozen = 'frozen' 'Frozen Products';
    ExemptProduct = 'Exempt' 'Tax exempt products';
    NonExemptProduct = 'NonExempt' 'Non tax exempt products';
    
    Deliver = 'Deliver' 'Deliver product';
    Pick = 'Pick' 'Pick inventory';
    Ship = 'Ship' 'Ship inventory';
    CheckCredit = 'CheckCredit' 'Check customer in-house credit';
    CheckLetterOfCredit = 'CheckLetterOfCredit' 'Check customer letter of credit';
    Discount = 'Discount' 'Compute Fee Discount';
    Fee = 'Fee' 'Compute Fee';
    PrintCustomsDeclaration = 'PrintCustomsDeclaration' 'Print the customs declaration';
    PrintPurchaseOrder = 'PrintPurchaseOrder' 'Print the purchase order';
    SalesTax = 'SalesTax' 'Compute sales tax';
    
    Abc486 = 'Abc486' 'Laptop computer';
    ChemB = 'ChemB' 'Chemical B'; 
    
    edges { 
        Abc486.StorageType.RoomTemp
        Abc486.SalesTaxStatus.NonExemptProduct
        Abc486.IsA.PricedProduct
        
        ChemB.StorageType.Frozen
        ChemB.SalesTaxStatus.NonExemptProduct
        ChemB.IsA.PricedProduct
        
    } 
    
    facets {
        IsA.PricedProduct { UnitPrice }
            constraints {
                n IsCategorizedAs: IsA.Category
                one SalesTaxStatus: *Product
            }
        IsA.ItemDetail { UnitPrice Quantity DiscountPercentage TaxRate }
            constraints {
                one OrderedProductOf: IsA.PricedProduct named product
                one ItemDetailOf: IsA.Order
            }
        IsA.Order { RequiredDate OrderDate ShipDate }
            constraints {
                n HasItemDetail: IsA.ItemDetail
                one SoldBy: IsA.Employee named by relationship
                one OrderedBy: IsA.Customer named by relationship
            }
        IsA.Category { Picture }
        IsA.StockedProduct
            constraints {
                one StockedAt: IsA.StockLocation
                { Quantity }
            }
    }
}

relationships {
    InArea = 'Area' 'A is a member of the economic community B' | AreaOf = 'Area Of' 'A is economic community of B';
    InCountry = 'Country' 'A is located in the country B' | countryOf = 'Country Of' 'A is the country of B';
    InRegion = 'Region' 'The general region of A is B' | RegionOf = 'Region Of' 'A is the general region of B';
    HasTerritory = 'Territory' 'A has territory B' | TerritoryOf = 'Territory Of' 'A is a territory of B';
    InState = 'State' 'A is located in the State B' | StateOf = 'State Of' 'A is the State of B';
    InCity = 'City' 'A is located in the City B' | CityOf = 'City Of' 'A is the city of B';
    AtAddress = 'Address' 'A is located at the address B' | AddressOf = 'Address Of' 'A is an address of B';
    InStateOrProvince = 'In State or Province' 'A is located in the State or Province of B' | StateOrProvinceOf = 'State or Province Of' 'A is the State or Province of B';
    OnStreet = 'Street' 'A is located on the Street B' | StreetOf = 'Street Of' 'A is the street of B';
    
    CustomerType = 'Customer Type' 'A has customer type of B' | CustomerTypeOf = 'Customer Type Of' 'A is the customer type of B';
    SalesTaxStatus = 'Sales Tax Status' 'The sales tax status of A is B' | SalesTaxStatusOf = 'Sales Tax Status Of' 'A is the sales tax status of B';
    
    StorageType = 'StorageType' 'The type of storage required for A is B' | StorageTypeOf = 'StorageType Of' 'A is the storage type of B';
    ShippingAddress = 'Shipping Address' 'the shipping address of A is B' | ShippingAddressOf ='Shipping Address Of' 'A is the shipping address of B';
    MailingAddress = 'Mailing Address' 'the mailing address of A is B' | MailingAddressOf ='Mailing Address Of' 'A is the mailing address of B';
   
    ReportsTo = 'Reports To' 'A reports to B' | HasReport = 'Has Report' 'A has report B';
    EmployeeOf = 'Employee Of' 'A is an employee of B' | HasEmployee = 'Has Employee' 'A has employee B';
    SupplierOf = 'Supplier Of' 'A is a supplier of B' | HasSupplier = 'Has Supplier' 'A has supplier B';
    Ships = 'Ships' 'A ships B' | HasShipper = 'Has Shipper' 'A has shipper B';
    ContactOf = 'Contact Of' 'A is the contact of B' | Contact = ' the contact of A is B';
    DepartmentOf = 'Department Of' 'A is an organizational department of B' | HasDepartment = 'Has Department' 'A has department B';
    
    ShippedBy = 'Shipped By' 'A was shipped by B' | Shipped = 'Shipped' 'A shipped B';
    DeliveredTo = 'Delivered To' 'A was delivered to B' | Recieved = 'Received' 'A recieved B';
    OrderedBy = 'Ordered By' 'A was ordered by B' | Ordered = 'Ordered' 'A ordered B';
    
    ItemDetailOf = 'Item Detail Of' 'A is an item detail of B' | HasItemDetail = 'Has Item Detail' 'A has item detail B';
    OrderedProductOf = 'Ordered Product Of' 'A is the ordered product of B' | ProductOrdered = 'Product Ordered' 'A is a product order of B';
    IsCategorizedAs = 'Is Categorized As' 'A is categorized as B'  | CategoryOf = 'A is a category of B';
    StockedAt = 'Stocked At' 'A is stocked at B' | Stocks = 'Stocks' 'A is the location of stock B';
    Sold = 'Sold' 'A sold B' | SoldBy = 'Sold By' 'A was sold by B';
}


status codes {
    Available = 'Available'  'Job is Available for processing';
    Active = 'Active' 'Working on it now';
    WaitingOnCreditCheck = 'Waiting on Credit Check' 'Waiting on credit check to be Completed';
    Completed = 'Completed' 'Completed job';
    Failure = 'Failure' 'Something went pear shaped';
    PickCompleted = 'Pick Completed' 'Pick product has been Completed';
    WaitingOnPurchaseOrder = 'Waiting on the purchace order' 'Waiting for the purchase order to be complete';
    WaitingOnPricing = 'Waiting on pricing' 'Waiting for pricing to be Completed';
    WaitingOnFee = 'Waiting on Fee calculation' 'Waiting for Fee calculation to be Completed';
    Abandoned = 'Job abandoned'  'We were going to do it, something happened in earlier processing that will prevent us from proceeding';
}

status code sequencings {
    Pick: {
           WaitingOnCreditCheck Available
           Available Active 
           Active Completed
    }
    Ship: {
        WaitingOnPurchaseOrder Available 
        Available Active 
        Active Completed
    }
    Deliver: {
        Available Active
        Active Completed
    }
    CheckCredit: {
        Available Active
        Active Completed
    }
    CheckLetterOfCredit: {
        Available Active
        Active Completed
    }
    Discount: {
        Available Active
        Active Completed
    }
    Fee: {
        Available Active
        Active Completed
    }
    PrintCustomsDeclaration: {
        WaitingOnFee Available
        Available Active
        Active Completed
    }
    PrintPurchaseOrder: {
        WaitingOnFee Available
        Available Active
        Active Completed
    }
    SalesTax: {
        Available Active
        Active Completed
    }
}

sequencing auths {
    parent {
        service: CheckCredit
        status: Completed
        parent: Pick
        next: Available
        
        service: CheckLetterOfCredit
        status: Completed
        parent: Pick
        next: Available
        
        service: PrintCustomsDeclaration
        status: Completed
        parent: Ship
        next: Available
        activeSiblings: false
        
        service: PrintPurchaseOrder
        status: Completed
        parent: Ship
        next: Available
        activeSiblings: false
        
        service: Discount
        status: Completed
        parent: Fee
        next: Available
        activeSiblings: false
        
        service: SalesTax
        status: Completed
        parent: Fee
        next: Available
        activeSiblings: false
        
        service: Ship
        status: Completed
        parent: Deliver
        next: Completed
        activeSiblings: false
        
        service: Fee
        status: Completed
        parent: PrintPurchaseOrder
        next: Available
        activeSiblings: false
    }
    sibling {
        parent: Pick
        status: Completed
        sibling: Ship
        next: WaitingOnPurchaseOrder
        
        parent: PrintPurchaseOrder
        status: Completed
        sibling: PrintCustomsDeclaration
        next: Available
    }
    child {
        parent: Ship
        status: WaitingOnPurchaseOrder
        child: PrintPurchaseOrder
        next: WaitingOnFee
        
        parent: Pick
        status: WaitingOnCreditCheck
        child: CheckCredit
        next: Available
        
        parent: PrintPurchaseOrder
        status: WaitingOnFee
        child: Fee
        next: Available
        
        parent: Deliver
        status: Available
        child: Pick
        next: WaitingOnCreditCheck
        
        parent: Fee
        status: Available
        child: SalesTax
        next: Available
        
        parent: Fee
        status: Available
        child: Discount
        next: Available
    }
}

inferences {
    AreaOf.RegionOf.AreaOf
    AreaOf.StateOf.AreaOf
    AreaOf.CityOf.AreaOf
    AreaOf.StreetOf.AreaOf
    RegionOf.StateOf.RegionOf
    RegionOf.CityOf.RegionOf
    RegionOf.StreetOf.RegionOf
    StateOf.CityOf.StateOf
    StateOf.StreetOf.StateOf
    CityOf.StreetOf.CityOf
    ReportsTo.ReportsTo.ReportsTo
}

protocols {
        service: Deliver product: AnyProduct from: AnyLocation to: AnyLocation
        ->
        service: Pick product: SameProduct assign: Factory1Agency
        
        
        service: Deliver product: AnyProduct from: AnyLocation to: AnyLocation requester: AnyAgency
        ->
        service: Ship product: SameProduct assign: Factory1Agency
        
        
        
        service: Pick product: AnyProduct from: US to: US
        ->
        service: CheckCredit product: SameProduct assign: CPU
        
        
        service: Pick product: AnyProduct from: US to: Euro
        ->
        service: CheckLetterOfCredit product: SameProduct assign: CreditDept
        
        
        
        service: Ship product: AnyProduct from: US to: Euro
        ->
        service: PrintCustomsDeclaration product: SameProduct assign: CPU
        
        
        service: Ship product: AnyProduct from: US to: AnyLocation
        ->
        service: PrintPurchaseOrder product: SameProduct assign: CPU 
        
        
        
        service: PrintPurchaseOrder product: AnyProduct from: US to: AnyLocation requester: AnyAgency
        -> 
        service: Fee product: SameProduct assign: BillingComputer
        
        
        
        service: Fee product: NonExemptProduct from: AnyLocation to: DC requester: NonExemptAgency 
        ->
        service: SalesTax product: SameProduct assign: BillingComputer
        
        
        service: Fee product: AnyProduct from: US to: Euro requester: ExternalCust
        ->
        service: Discount product: SameProduct assign: BillingComputer
        
        
        service: Fee product: AnyProduct from: US to: DC requester: GeorgetownUniversity
        ->
        service: SalesTax product: SameProduct assign: BillingComputer
}
meta protocols {
        transform: Deliver
        product: AnyRelationship
        from: InArea
        to: InState
        
        transform: Pick
        product: AnyRelationship
        from: InArea
        to: InArea 
        requester: CustomerType
        
        transform: Ship
        product: AnyRelationship
        from: InArea
        to: InArea 
        requester: CustomerType
        
        transform: Fee
        product: AnyRelationship
        to: InCity
        requester: SalesTaxStatus 
        
        transform: PrintPurchaseOrder
        product: AnyRelationship
        from: InArea
        to: AnyRelationship
        requester: AnyRelationship
}